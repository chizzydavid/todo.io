version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  docker: circleci/docker@2.0.1
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0  

jobs:
  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm i
      - save_cache:
          key: npm-build
          paths: 
            - node-modules
      - run: 
          name: run file lint
          command: |
            npm run lint

  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [npm-build]
      - run:
          name: run unit tests
          command: |
            npm i
            npm run test

  build-docker-image:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache python3 py3-pip
            pip3 install --upgrade pip 
            pip3 install --no-cache-dir awscli
      - run:
          name: Build Application Docker Image
          command: |
            docker build -t capstone_project . 
      - run: 
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/capstone_project.tar capstone_project
      - run: 
          name: Push application Docker image
          command: |
            docker tag capstone_project "${ECR_URL}/capstone_project:${CIRCLE_WORKFLOW_ID:0:7}"
            login="$(aws ecr get-login --no-include-email --region us-east-2)"
            docker push "${ECR_URL}/capstone_project:${CIRCLE_WORKFLOW_ID:0:7}"

  create-small-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''

      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download

      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get nodes
            kubectl get deployment
            kubectl get services

  create-service:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: deployment/app-service.yml
          resource-name: service/todolb


  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/app-deployment.yml"
          get-rollout-status: true
          resource-name: deployment/todoapp


workflows:
  default:
    jobs:
      - build
      - test:
          requires: [build]
      - build-docker-image:
          requires: [test]
      - create-small-cluster:
          cluster-name: capstone-udacity
          requires: [build-docker-image]
      - test-cluster:
          cluster-name: capstone-udacity
          requires: [create-small-cluster]
      - create-service:
          cluster-name: capstone-udacity
          requires: [create-small-cluster]
      - create-deployment:
          cluster-name: capstone-udacity
          requires: [create-service]
      - aws-eks/update-container-image:
          cluster-name: capstone-udacity
          container-image-updates: 'todoapp=${ECR_URL}/capstone_project:${CIRCLE_WORKFLOW_ID:0:7}'
          resource-name: deployment/todoapp
          requires: [create-deployment]

